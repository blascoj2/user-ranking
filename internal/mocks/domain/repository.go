// Code generated by MockGen. DO NOT EDIT.
// Source: ../internal/domain/repository.go

// Package domain_mock is a generated GoMock package.
package domain_mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/user-ranking/internal/domain"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetRelativeRanking mocks base method.
func (m *MockRepository) GetRelativeRanking(ctx context.Context, position, rangeSize int) ([]domain.UserRank, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelativeRanking", ctx, position, rangeSize)
	ret0, _ := ret[0].([]domain.UserRank)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelativeRanking indicates an expected call of GetRelativeRanking.
func (mr *MockRepositoryMockRecorder) GetRelativeRanking(ctx, position, rangeSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelativeRanking", reflect.TypeOf((*MockRepository)(nil).GetRelativeRanking), ctx, position, rangeSize)
}

// GetTopRanking mocks base method.
func (m *MockRepository) GetTopRanking(ctx context.Context, position int) ([]domain.UserRank, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopRanking", ctx, position)
	ret0, _ := ret[0].([]domain.UserRank)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopRanking indicates an expected call of GetTopRanking.
func (mr *MockRepositoryMockRecorder) GetTopRanking(ctx, position interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopRanking", reflect.TypeOf((*MockRepository)(nil).GetTopRanking), ctx, position)
}

// SaveUserScore mocks base method.
func (m *MockRepository) SaveUserScore(ctx context.Context, userScore domain.UserRank) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUserScore", ctx, userScore)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUserScore indicates an expected call of SaveUserScore.
func (mr *MockRepositoryMockRecorder) SaveUserScore(ctx, userScore interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUserScore", reflect.TypeOf((*MockRepository)(nil).SaveUserScore), ctx, userScore)
}

// UpdateUserScore mocks base method.
func (m *MockRepository) UpdateUserScore(ctx context.Context, userId domain.UserId, partialScore domain.Score) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserScore", ctx, userId, partialScore)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserScore indicates an expected call of UpdateUserScore.
func (mr *MockRepositoryMockRecorder) UpdateUserScore(ctx, userId, partialScore interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserScore", reflect.TypeOf((*MockRepository)(nil).UpdateUserScore), ctx, userId, partialScore)
}
